From 1eae92fe23ff0e5ba28374220417a44920192ee4 Mon Sep 17 00:00:00 2001
Message-Id: <1eae92fe23ff0e5ba28374220417a44920192ee4.1389014116.git.minovotn@redhat.com>
In-Reply-To: <c8cc35838d42aa286242772d97e3a9be7bb786ba.1389014116.git.minovotn@redhat.com>
References: <c8cc35838d42aa286242772d97e3a9be7bb786ba.1389014116.git.minovotn@redhat.com>
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Mon, 9 Dec 2013 14:08:57 +0100
Subject: [PATCH 09/50] block: add logical block provisioning info to
 BlockDriverInfo

RH-Author: Paolo Bonzini <pbonzini@redhat.com>
Message-id: <1386598178-11845-12-git-send-email-pbonzini@redhat.com>
Patchwork-id: 56051
O-Subject: [RHEL 7.0 qemu-kvm PATCH 11/52] block: add logical block provisioning info to BlockDriverInfo
Bugzilla: 1007815
RH-Acked-by: Jeffrey Cody <jcody@redhat.com>
RH-Acked-by: Fam Zheng <famz@redhat.com>
RH-Acked-by: Stefan Hajnoczi <stefanha@redhat.com>

From: Peter Lieven <pl@kamp.de>

Reviewed-by: Eric Blake <eblake@redhat.com>
Signed-off-by: Peter Lieven <pl@kamp.de>
Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
(cherry picked from commit e1a5c4bed44bc23f69f53883c657e31e150cab30)
---
 include/block/block.h | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

Signed-off-by: Michal Novotny <minovotn@redhat.com>
---
 include/block/block.h | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/include/block/block.h b/include/block/block.h
index 10abc00..ab3044e 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -18,6 +18,22 @@ typedef struct BlockDriverInfo {
     /* offset at which the VM state can be saved (0 if not possible) */
     int64_t vm_state_offset;
     bool is_dirty;
+    /*
+     * True if unallocated blocks read back as zeroes. This is equivalent
+     * to the the LBPRZ flag in the SCSI logical block provisioning page.
+     */
+    bool unallocated_blocks_are_zero;
+    /*
+     * True if the driver can optimize writing zeroes by unmapping
+     * sectors. This is equivalent to the BLKDISCARDZEROES ioctl in Linux
+     * with the difference that in qemu a discard is allowed to silently
+     * fail. Therefore we have to use bdrv_write_zeroes with the
+     * BDRV_REQ_MAY_UNMAP flag for an optimized zero write with unmapping.
+     * After this call the driver has to guarantee that the contents read
+     * back as zero. It is additionally required that the block device is
+     * opened with BDRV_O_UNMAP flag for this to work.
+     */
+    bool can_write_zeroes_with_unmap;
 } BlockDriverInfo;
 
 typedef struct BlockFragInfo {
-- 
1.7.11.7

