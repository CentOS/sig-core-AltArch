From 69813093427b02a4a0e02264abd1f851f2b49249 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Thu, 7 Nov 2013 07:23:45 +0100
Subject: [PATCH 26/81] block/get_block_status: avoid redundant callouts on raw devices

RH-Author: Paolo Bonzini <pbonzini@redhat.com>
Message-id: <1382084091-16636-27-git-send-email-pbonzini@redhat.com>
Patchwork-id: 55009
O-Subject: [RHEL 7.0 qemu-kvm PATCH 26/26] block/get_block_status: avoid redundant callouts on raw devices
Bugzilla: 989646
RH-Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
RH-Acked-by: Max Reitz <mreitz@redhat.com>
RH-Acked-by: Kevin Wolf <kwolf@redhat.com>

From: Peter Lieven <pl@kamp.de>

if a raw device like an iscsi target or host device is used
the current implementation makes a second call out to get
the block status of bs->file.

Signed-off-by: Peter Lieven <pl@kamp.de>
Reviewed-by: Eric Blake <eblake@redhat.com>
Signed-off-by: Kevin Wolf <kwolf@redhat.com>
(cherry picked from commit 92bc50a5ad7fbc9a0bd17240eaea5027a100ca79)

Conflicts:
	block/raw_bsd.c

Signed-off-by: Miroslav Rezanina <mrezanin@redhat.com>
---
 block.c               |    6 ++++++
 block/raw.c           |    4 +++-
 include/block/block.h |    4 ++++
 3 files changed, 13 insertions(+), 1 deletions(-)

diff --git a/block.c b/block.c
index 5c49461..fdff92f 100644
--- a/block.c
+++ b/block.c
@@ -3073,6 +3073,12 @@ static int64_t coroutine_fn bdrv_co_get_block_status(BlockDriverState *bs,
         return ret;
     }
 
+    if (ret & BDRV_BLOCK_RAW) {
+        assert(ret & BDRV_BLOCK_OFFSET_VALID);
+        return bdrv_get_block_status(bs->file, ret >> BDRV_SECTOR_BITS,
+                                     *pnum, pnum);
+    }
+
     if (!(ret & BDRV_BLOCK_DATA)) {
         if (bdrv_has_zero_init(bs)) {
             ret |= BDRV_BLOCK_ZERO;
diff --git a/block/raw.c b/block/raw.c
index 844a222..7d82cf3 100644
--- a/block/raw.c
+++ b/block/raw.c
@@ -39,7 +39,9 @@ static int64_t coroutine_fn raw_co_get_block_status(BlockDriverState *bs,
                                             int64_t sector_num,
                                             int nb_sectors, int *pnum)
 {
-    return bdrv_get_block_status(bs->file, sector_num, nb_sectors, pnum);
+    *pnum = nb_sectors;
+    return BDRV_BLOCK_RAW | BDRV_BLOCK_OFFSET_VALID | BDRV_BLOCK_DATA |
+           (sector_num << BDRV_SECTOR_BITS);
 }
 
 static int coroutine_fn raw_co_write_zeroes(BlockDriverState *bs,
diff --git a/include/block/block.h b/include/block/block.h
index 01f5c65..bc1f5f6 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -95,6 +95,9 @@ typedef struct BlockDevOps {
 /* BDRV_BLOCK_DATA: data is read from bs->file or another file
  * BDRV_BLOCK_ZERO: sectors read as zero
  * BDRV_BLOCK_OFFSET_VALID: sector stored in bs->file as raw data
+ * BDRV_BLOCK_RAW: used internally to indicate that the request
+ *                 was answered by the raw driver and that one
+ *                 should look in bs->file directly.
  *
  * If BDRV_BLOCK_OFFSET_VALID is set, bits 9-62 represent the offset in
  * bs->file where sector data can be read from as raw data.
@@ -116,6 +119,7 @@ typedef struct BlockDevOps {
 #define BDRV_BLOCK_DATA         1
 #define BDRV_BLOCK_ZERO         2
 #define BDRV_BLOCK_OFFSET_VALID 4
+#define BDRV_BLOCK_RAW          8
 #define BDRV_BLOCK_OFFSET_MASK  BDRV_SECTOR_MASK
 
 typedef enum {
-- 
1.7.1

