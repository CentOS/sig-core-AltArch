From be2e6b14f019e1e7f109fb5e7e4391edc42062cb Mon Sep 17 00:00:00 2001
From: Ken Gaillot <kgaillot@redhat.com>
Date: Tue, 6 Dec 2016 12:04:10 -0600
Subject: [PATCH] Log: various: fix spelling errors in log messages and
 comments

---
 BasicSanity.sh               |  2 +-
 cib/messages.c               |  2 +-
 fencing/commands.c           |  2 +-
 include/crm/pengine/status.h |  8 +++++---
 lib/ais/plugin.c             |  4 ++--
 lib/cluster/cpg.c            |  2 +-
 lib/cluster/heartbeat.c      |  4 ++--
 lib/pengine/unpack.c         | 14 +++++++-------
 lib/pengine/utils.c          |  6 +++---
 mcp/pacemaker.c              |  4 ++--
 pengine/graph.c              |  4 ++--
 pengine/native.c             |  4 ++--
 pengine/regression.sh        |  2 +-
 13 files changed, 30 insertions(+), 28 deletions(-)

diff --git a/BasicSanity.sh b/BasicSanity.sh
index d00f337..fb687ad 100755
--- a/BasicSanity.sh
+++ b/BasicSanity.sh
@@ -31,7 +31,7 @@ function run_as_root() {
         $CMD
 
     elif [ -z $TRAVIS ]; then
-        # sudo doesn't work in builtbot, su doesn't work in travis
+        # sudo doesn't work in buildbot, su doesn't work in travis
         echo "Enter the root password..."
         su root -c "$CMD"
 
diff --git a/cib/messages.c b/cib/messages.c
index ff149f7..4e704dc 100644
--- a/cib/messages.c
+++ b/cib/messages.c
@@ -544,7 +544,7 @@ sync_our_cib(xmlNode * request, gboolean all)
 
     /* remove the "all == FALSE" condition
      *
-     * sync_from was failing, the local client wasnt being notified
+     * sync_from was failing, the local client wasn't being notified
      *    because it didn't know it was a reply
      * setting this does not prevent the other nodes from applying it
      *    if all == TRUE
diff --git a/fencing/commands.c b/fencing/commands.c
index d21e5a8..e7fce78 100644
--- a/fencing/commands.c
+++ b/fencing/commands.c
@@ -988,7 +988,7 @@ dynamic_list_search_cb(GPid pid, int rc, const char *output, gpointer user_data)
 
 /*!
  * \internal
- * \brief Returns true if any key in first is not is second or second has a different value for key
+ * \brief Returns true if any key in first is not in second or second has a different value for key
  */
 static int
 device_params_diff(GHashTable *first, GHashTable *second) {
diff --git a/include/crm/pengine/status.h b/include/crm/pengine/status.h
index 5e3b191..79e4572 100644
--- a/include/crm/pengine/status.h
+++ b/include/crm/pengine/status.h
@@ -232,9 +232,11 @@ enum pe_action_flags {
     pe_action_clear = 0x00400,
     pe_action_dangle = 0x00800,
 
-    pe_action_requires_any = 0x01000, /* This action requires one or mre of its dependencies to be runnable
-                                       * We use this to clear the runnable flag before checking dependencies
-                                       */
+    /* This action requires one or more of its dependencies to be runnable.
+     * We use this to clear the runnable flag before checking dependencies.
+     */
+    pe_action_requires_any = 0x01000,
+
     pe_action_reschedule = 0x02000,
     pe_action_tracking = 0x04000,
 };
diff --git a/lib/ais/plugin.c b/lib/ais/plugin.c
index 007fc24..b8a2b96 100644
--- a/lib/ais/plugin.c
+++ b/lib/ais/plugin.c
@@ -663,7 +663,7 @@ pcmk_startup(struct corosync_api_v1 *init_with)
     if (use_mcp == FALSE) {
         pthread_create(&pcmk_wait_thread, NULL, pcmk_wait_dispatch, NULL);
         for (start_seq = 1; start_seq < max; start_seq++) {
-            /* dont start anything with start_seq < 1 */
+            /* don't start anything with start_seq < 1 */
             for (lpc = 0; lpc < max; lpc++) {
                 if (start_seq == pcmk_children[lpc].start_seq) {
                     spawn_child(&(pcmk_children[lpc]));
@@ -1108,7 +1108,7 @@ pcmk_shutdown(void)
     wait_active = FALSE;        /* stop the wait loop */
 
     for (; phase > 0; phase--) {
-        /* dont stop anything with start_seq < 1 */
+        /* don't stop anything with start_seq < 1 */
 
         for (lpc = max - 1; lpc >= 0; lpc--) {
             if (phase != pcmk_children[lpc].start_seq) {
diff --git a/lib/cluster/cpg.c b/lib/cluster/cpg.c
index 5efafc8..aef3583 100644
--- a/lib/cluster/cpg.c
+++ b/lib/cluster/cpg.c
@@ -637,7 +637,7 @@ send_cluster_text(int class, const char *data,
     free(target);
 
 #if SUPPORT_PLUGIN
-    /* The plugin is the only time we dont use CPG messaging */
+    /* The plugin is the only time we don't use CPG messaging */
     if(get_cluster_type() == pcmk_cluster_classic_ais) {
         return send_plugin_text(class, iov);
     }
diff --git a/lib/cluster/heartbeat.c b/lib/cluster/heartbeat.c
index a471402..8414602 100644
--- a/lib/cluster/heartbeat.c
+++ b/lib/cluster/heartbeat.c
@@ -117,7 +117,7 @@ convert_ha_field(xmlNode * parent, void *msg_v, int lpc)
 
             if (rc == BZ_OUTBUFF_FULL) {
                 size = size * 2;
-                /* dont try to allocate more memory than we have */
+                /* don't try to allocate more memory than we have */
                 if (size > 0) {
                     goto retry;
                 }
@@ -489,7 +489,7 @@ ha_msg_dispatch(ll_cluster_t * cluster_conn, gpointer user_data)
         if (cluster_conn->llc_ops->msgready(cluster_conn) == 0) {
             crm_trace("no message ready yet");
         }
-        /* invoke the callbacks but dont block.
+        /* invoke the callbacks but don't block.
          * cluster_conn->llc_ops->rcvmsg(cluster_conn, 0); */
         msg = cluster_conn->llc_ops->readmsg(cluster_conn, 0);
         if (msg) {
diff --git a/lib/pengine/unpack.c b/lib/pengine/unpack.c
index a4d6845..a9fbcc0 100644
--- a/lib/pengine/unpack.c
+++ b/lib/pengine/unpack.c
@@ -1494,7 +1494,7 @@ determine_online_status(xmlNode * node_state, node_t * this_node, pe_working_set
     }
 
     if (online && this_node->details->shutdown) {
-        /* dont run resources here */
+        /* don't run resources here */
         this_node->fixed = TRUE;
         this_node->weight = -INFINITY;
     }
@@ -2381,14 +2381,14 @@ find_lrm_op(const char *resource, const char *op, const char *node, const char *
 }
 
 static void
-unpack_rsc_migration(resource_t *rsc, node_t *node, xmlNode *xml_op, pe_working_set_t * data_set) 
+unpack_rsc_migration(resource_t *rsc, node_t *node, xmlNode *xml_op, pe_working_set_t * data_set)
 {
-                
+
     /*
      * The normal sequence is (now): migrate_to(Src) -> migrate_from(Tgt) -> stop(Src)
      *
-     * So if a migrate_to is followed by a stop, then we dont need to care what
-     * happended on the target node
+     * So if a migrate_to is followed by a stop, then we don't need to care what
+     * happened on the target node
      *
      * Without the stop, we need to look for a successful migrate_from.
      * This would also imply we're no longer running on the source
@@ -3096,13 +3096,13 @@ unpack_rsc_op(resource_t * rsc, node_t * node, xmlNode * xml_op, xmlNode ** last
     if (is_not_set(rsc->flags, pe_rsc_unique)) {
         parent = uber_parent(rsc);
     }
-    
+
     pe_rsc_trace(rsc, "Unpacking task %s/%s (call_id=%d, status=%d, rc=%d) on %s (role=%s)",
                  task_key, task, task_id, status, rc, node->details->uname, role2text(rsc->role));
 
     if (node->details->unclean) {
         pe_rsc_trace(rsc, "Node %s (where %s is running) is unclean."
-                     " Further action depends on the value of the stop's on-fail attribue",
+                     " Further action depends on the value of the stop's on-fail attribute",
                      node->details->uname, rsc->id);
     }
 
diff --git a/lib/pengine/utils.c b/lib/pengine/utils.c
index 2e43623..cc97db1 100644
--- a/lib/pengine/utils.c
+++ b/lib/pengine/utils.c
@@ -516,7 +516,7 @@ custom_action(resource_t * rsc, char *key, const char *task,
 #if 0
             /*
              * No point checking this
-             * - if we dont have quorum we can't stonith anyway
+             * - if we don't have quorum we can't stonith anyway
              */
         } else if (action->needs == rsc_req_stonith) {
             crm_trace("Action %s requires only stonith", action->uuid);
@@ -1418,7 +1418,7 @@ sort_op_by_callid(gconstpointer a, gconstpointer b)
              *
              * if the UUID from the TE doesn't match then one better
              *   be a pending operation.
-             * pending operations dont survive between elections and joins
+             * pending operations don't survive between elections and joins
              *   because we query the LRM directly
              */
 
@@ -2098,7 +2098,7 @@ trigger_unfencing(
         return;
 
     } else if (rsc != NULL && is_not_set(rsc->flags, pe_rsc_fence_device)) {
-        /* Wasnt a stonith device */
+        /* Wasn't a stonith device */
         return;
 
     } else if(node
diff --git a/mcp/pacemaker.c b/mcp/pacemaker.c
index c5898c9..292e28c 100644
--- a/mcp/pacemaker.c
+++ b/mcp/pacemaker.c
@@ -384,7 +384,7 @@ pcmk_shutdown_worker(gpointer user_data)
     }
 
     for (; phase > 0; phase--) {
-        /* dont stop anything with start_seq < 1 */
+        /* Don't stop anything with start_seq < 1 */
 
         for (lpc = max - 1; lpc >= 0; lpc--) {
             pcmk_child_t *child = &(pcmk_children[lpc]);
@@ -782,7 +782,7 @@ init_children_processes(void)
 
     /* start any children that have not been detected */
     for (start_seq = 1; start_seq < max; start_seq++) {
-        /* dont start anything with start_seq < 1 */
+        /* don't start anything with start_seq < 1 */
         for (lpc = 0; lpc < max; lpc++) {
             if (pcmk_children[lpc].pid) {
                 /* we are already tracking it */
diff --git a/pengine/graph.c b/pengine/graph.c
index 645150b..ee7c7c8 100644
--- a/pengine/graph.c
+++ b/pengine/graph.c
@@ -363,13 +363,13 @@ graph_update_action(action_t * first, action_t * then, node_t * node, enum pe_ac
         && (flags & pe_action_optional) == 0) {
         processed = TRUE;
         crm_trace("%s implies %s printed", first->uuid, then->uuid);
-        update_action_flags(then, pe_action_print_always, __FUNCTION__);      /* dont care about changed */
+        update_action_flags(then, pe_action_print_always, __FUNCTION__);  /* don't care about changed */
     }
 
     if ((type & pe_order_implies_first_printed) && (flags & pe_action_optional) == 0) {
         processed = TRUE;
         crm_trace("%s implies %s printed", then->uuid, first->uuid);
-        update_action_flags(first, pe_action_print_always, __FUNCTION__);     /* dont care about changed */
+        update_action_flags(first, pe_action_print_always, __FUNCTION__); /* don't care about changed */
     }
 
     if ((type & pe_order_implies_then
diff --git a/pengine/native.c b/pengine/native.c
index b24e3fd..56a1434 100644
--- a/pengine/native.c
+++ b/pengine/native.c
@@ -2879,7 +2879,7 @@ native_start_constraints(resource_t * rsc, action_t * stonith_op, pe_working_set
 
         } else if (safe_str_eq(action->task, RSC_START)
                    && NULL == pe_hash_table_lookup(rsc->known_on, target->details->id)) {
-            /* if known == NULL, then we dont know if
+            /* if known == NULL, then we don't know if
              *   the resource is active on the node
              *   we're about to shoot
              *
@@ -2891,7 +2891,7 @@ native_start_constraints(resource_t * rsc, action_t * stonith_op, pe_working_set
              * it's analogous to waiting for all the probes
              *   for rscX to complete before starting rscX
              *
-             * the most likely explaination is that the
+             * the most likely explanation is that the
              *   DC died and took its status with it
              */
 
diff --git a/pengine/regression.sh b/pengine/regression.sh
index 4fea356..be1734b 100755
--- a/pengine/regression.sh
+++ b/pengine/regression.sh
@@ -138,7 +138,7 @@ do_test clone-require-all-7 "clone A and B both start at the same time. all inst
 do_test clone-require-all-no-interleave-1 "C starts everywhere after A and B"
 do_test clone-require-all-no-interleave-2 "C starts on nodes 1, 2, and 4 with only one active instance of B"
 do_test clone-require-all-no-interleave-3 "C remains active when instance of B is stopped on one node and started on another."
-do_test one-or-more-unrunnnable-instances "Avoid dependencies on instances that wont ever be started"
+do_test one-or-more-unrunnnable-instances "Avoid dependencies on instances that won't ever be started"
 
 echo ""
 do_test order1 "Order start 1     "
-- 
1.8.3.1

