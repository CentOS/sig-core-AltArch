Backport of commit 052aff95782fefe9c63566471063e8b20836bfb8
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jan 23 00:42:51 2013 +0000

    Make bits/wchar.h correct for all architectures (bug 15036).

2013-01-23  Joseph Myers  <joseph@codesourcery.com>

	[BZ #15036]
	* bits/wchar.h (__WCHAR_MAX): Define based on __WCHAR_MAX__, or
	based on [L'\0' - 1 > 0] if [!__WCHAR_MAX__].
	(__WCHAR_MIN): Likewise, using __WCHAR_MIN__.
	* sysdeps/unix/sysv/linux/x86/bits/wchar.h: Remove.



diff -ruNp glibc-2.17-c758a686/bits/wchar.h glibc-2.17-c758a686/bits/wchar.h
--- glibc-2.17-c758a686/bits/wchar.h	2012-12-24 22:02:13.000000000 -0500
+++ glibc-2.17-c758a686/bits/wchar.h	2014-03-27 14:53:45.940914030 -0400
@@ -19,7 +19,31 @@
 #ifndef _BITS_WCHAR_H
 #define _BITS_WCHAR_H	1
 
-#define __WCHAR_MIN	(-2147483647 - 1)
-#define __WCHAR_MAX	(2147483647)
+/* The fallback definitions, for when __WCHAR_MAX__ or __WCHAR_MIN__
+   are not defined, give the right value and type as long as both int
+   and wchar_t are 32-bit types.  Adding L'\0' to a constant value
+   ensures that the type is correct; it is necessary to use (L'\0' +
+   0) rather than just L'\0' so that the type in C++ is the promoted
+   version of wchar_t rather than the distinct wchar_t type itself.
+   Because wchar_t in preprocessor #if expressions is treated as
+   intmax_t or uintmax_t, the expression (L'\0' - 1) would have the
+   wrong value for WCHAR_MAX in such expressions and so cannot be used
+   to define __WCHAR_MAX in the unsigned case.  */
+
+#ifdef __WCHAR_MAX__
+# define __WCHAR_MAX	__WCHAR_MAX__
+#elif L'\0' - 1 > 0
+# define __WCHAR_MAX	(0xffffffffu + L'\0')
+#else
+# define __WCHAR_MAX	(0x7fffffff + L'\0')
+#endif
+
+#ifdef __WCHAR_MIN__
+# define __WCHAR_MIN	__WCHAR_MIN__
+#elif L'\0' - 1 > 0
+# define __WCHAR_MIN	(L'\0' + 0)
+#else
+# define __WCHAR_MIN	(-__WCHAR_MAX - 1)
+#endif
 
 #endif	/* bits/wchar.h */
