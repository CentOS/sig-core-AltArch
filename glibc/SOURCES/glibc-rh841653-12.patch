commit 2868e0703d5b8c8e60c6f60de13e876c4d85daa0
Author: Andreas Schwab <schwab@suse.de>
Date:   Mon Aug 11 11:18:26 2014 +0200

    Filter out PTHREAD_MUTEX_NO_ELISION_NP bit in pthread_mutexattr_gettype (BZ #15790)
    
    pthread_mutexattr_settype adds PTHREAD_MUTEX_NO_ELISION_NP to kind,
    which is an internal flag that pthread_mutexattr_gettype shouldn't
    expose, since pthread_mutexattr_settype wouldn't accept it.
Index: glibc-2.17-c758a686/nptl/Makefile
===================================================================
--- glibc-2.17-c758a686.orig/nptl/Makefile
+++ glibc-2.17-c758a686/nptl/Makefile
@@ -252,6 +252,7 @@ tests = tst-typesizes \
 	tst-exit1 tst-exit2 tst-exit3 \
 	tst-stdio1 tst-stdio2 \
 	tst-stack1 tst-stack2 tst-stack3 tst-stack4 tst-pthread-getattr \
+	tst-pthread-mutexattr \
 	tst-unload \
 	tst-dlsym1 \
 	tst-sysconf \
Index: glibc-2.17-c758a686/nptl/pthread_mutexattr_gettype.c
===================================================================
--- glibc-2.17-c758a686.orig/nptl/pthread_mutexattr_gettype.c
+++ glibc-2.17-c758a686/nptl/pthread_mutexattr_gettype.c
@@ -28,7 +28,8 @@ pthread_mutexattr_gettype (attr, kind)
 
   iattr = (const struct pthread_mutexattr *) attr;
 
-  *kind = iattr->mutexkind & ~PTHREAD_MUTEXATTR_FLAG_BITS;
+  *kind = (iattr->mutexkind & ~PTHREAD_MUTEXATTR_FLAG_BITS
+	   & ~PTHREAD_MUTEX_NO_ELISION_NP);
 
   return 0;
 }
Index: glibc-2.17-c758a686/nptl/tst-pthread-mutexattr.c
===================================================================
--- /dev/null
+++ glibc-2.17-c758a686/nptl/tst-pthread-mutexattr.c
@@ -0,0 +1,60 @@
+/* Make sure that pthread_mutexattr_gettype returns a valid kind.
+
+   Copyright (C) 2015 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#include <stdio.h>
+#include <string.h>
+#include <pthread.h>
+
+static int
+do_test (void)
+{
+  pthread_mutexattr_t attr;
+  int kind;
+  int error;
+
+  error = pthread_mutexattr_init (&attr);
+  if (error)
+    {
+      printf ("pthread_mutexattr_init: %s\n", strerror (error));
+      return 1;
+    }
+  error = pthread_mutexattr_settype (&attr, PTHREAD_MUTEX_DEFAULT);
+  if (error)
+    {
+      printf ("pthread_mutexattr_settype (1): %s\n", strerror (error));
+      return 1;
+    }
+  error = pthread_mutexattr_gettype (&attr, &kind);
+  if (error)
+    {
+      printf ("pthread_mutexattr_gettype: %s\n", strerror (error));
+      return 1;
+    }
+  error = pthread_mutexattr_settype (&attr, kind);
+  if (error)
+    {
+      printf ("pthread_mutexattr_settype (2): %s\n", strerror (error));
+      return 1;
+    }
+  return 0;
+}
+
+
+#define TEST_FUNCTION do_test ()
+#include "../test-skeleton.c"
