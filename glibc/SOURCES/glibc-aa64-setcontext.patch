Backport

37d350073888887637aa67dddf988d9c4b226032 \
  aarch64: Re-implement setcontext without rt_sigreturn syscall
03ea4d9b6916857e3c2a021f55d2a853cb837398 \
  [AArch64] Simplify getcontext pstate initialization.
6e445a3d2bdf152ebf57d1c92bfea1828e070743 \
  [AArch64] Ensure getcontext() initializes PSTATE.


diff --git glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/getcontext.S glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/getcontext.S
index aff2e32..70b2e32 100644
--- glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/getcontext.S
+++ glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/getcontext.S
@@ -1,6 +1,6 @@
 /* Save current context.
 
-   Copyright (C) 2009-2012 Free Software Foundation, Inc.
+   Copyright (C) 2009-2014 Free Software Foundation, Inc.
 
    This file is part of the GNU C Library.
 
@@ -53,6 +53,9 @@ ENTRY(__getcontext)
 	mov	x2, sp
 	str     x2, [x0, oSP]
 
+	/* Initialize the pstate.  */
+	str	xzr, [x0, oPSTATE]
+
 	/* Figure out where to place the first context extension
 	   block.  */
 	add     x2, x0, #oEXTENSION
diff --git glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/setcontext.S glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/setcontext.S
index a98f67f..f45a655 100644
--- glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/setcontext.S
+++ glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/setcontext.S
@@ -1,6 +1,6 @@
 /* Set current context.
 
-   Copyright (C) 2009-2012 Free Software Foundation, Inc.
+   Copyright (C) 2009-2014 Free Software Foundation, Inc.
 
    This file is part of the GNU C Library.
 
@@ -22,68 +22,108 @@
 #include "ucontext_i.h"
 #include "ucontext-internal.h"
 
-/* int setcontext (const ucontext_t *ucp) */
+/*  int __setcontext (const ucontext_t *ucp)
 
-	.text
-
-ENTRY(__setcontext)
-
-	/* Create a signal frame on the stack:
-
-		fp
-		lr
-		...
-	   sp-> rt_sigframe
-	 */
-
-	stp     x29, x30, [sp, -16]!
-	cfi_adjust_cfa_offset (16)
-	cfi_rel_offset (x29, 0)
-	cfi_rel_offset (x30, 8)
-
-        mov     x29, sp
-	cfi_def_cfa_register (x29)
-
-	/* Allocate space for the sigcontext.  */
-	mov	w3, #((RT_SIGFRAME_SIZE + SP_ALIGN_SIZE) & SP_ALIGN_MASK)
-	sub	sp, sp,	x3
+  Restores the machine context in UCP and thereby resumes execution
+  in that context.
 
-	/* Compute the base address of the ucontext structure.  */
-	add	x1, sp, #RT_SIGFRAME_UCONTEXT
+  This implementation is intended to be used for *synchronous* context
+  switches only.  Therefore, it does not have to restore anything
+  other than the PRESERVED state.  */
 
-	/* Only ucontext is required in the frame, *copy* it in.  */
-
-#if UCONTEXT_SIZE % 16
-#error The implementation of setcontext.S assumes sizeof(ucontext_t) % 16 == 0
-#endif
-
-	mov	x2, #UCONTEXT_SIZE / 16
-0:
-	ldp	x3, x4, [x0], #16
-	stp	x3, x4, [x1], #16
-	sub	x2, x2, 1
-	cbnz	x2, 0b
+	.text
 
-	/* rt_sigreturn () -- no arguments, sp points to struct rt_sigframe.  */
-	mov	x8, SYS_ify (rt_sigreturn)
+ENTRY (__setcontext)
+	/* Save a copy of UCP.  */
+	mov	x9, x0
+
+	/* Set the signal mask with
+	   rt_sigprocmask (SIG_SETMASK, mask, NULL, _NSIG/8).  */
+	mov	x0, #SIG_SETMASK
+	add	x1, x9, #UCONTEXT_SIGMASK
+	mov	x2, #0
+	mov	x3, #_NSIG8
+	mov	x8, SYS_ify (rt_sigprocmask)
 	svc	0
-
-	/* Ooops we failed.  Recover the stack */
-
-	mov	sp, x29
-	cfi_def_cfa_register (sp)
-
-        ldp     x29, x30, [sp], 16
-	cfi_adjust_cfa_offset (16)
-	cfi_restore (x29)
-	cfi_restore (x30)
-	b	C_SYMBOL_NAME(__syscall_error)
-
+	cbz	x0, 1f
+	b	C_SYMBOL_NAME (__syscall_error)
+1:
+	/* Restore the general purpose registers.  */
+	mov	x0, x9
+	cfi_def_cfa (x0, 0)
+	cfi_offset (x18, oX0 + 18 * SZREG)
+	cfi_offset (x19, oX0 + 19 * SZREG)
+	cfi_offset (x20, oX0 + 20 * SZREG)
+	cfi_offset (x21, oX0 + 21 * SZREG)
+	cfi_offset (x22, oX0 + 22 * SZREG)
+	cfi_offset (x23, oX0 + 23 * SZREG)
+	cfi_offset (x24, oX0 + 24 * SZREG)
+	cfi_offset (x25, oX0 + 25 * SZREG)
+	cfi_offset (x26, oX0 + 26 * SZREG)
+	cfi_offset (x27, oX0 + 27 * SZREG)
+	cfi_offset (x28, oX0 + 28 * SZREG)
+	cfi_offset (x29, oX0 + 29 * SZREG)
+	cfi_offset (x30, oX0 + 30 * SZREG)
+
+	cfi_offset ( d8, oV0 + 8 * SZVREG)
+	cfi_offset ( d9, oV0 + 9 * SZVREG)
+	cfi_offset (d10, oV0 + 10 * SZVREG)
+	cfi_offset (d11, oV0 + 11 * SZVREG)
+	cfi_offset (d12, oV0 + 12 * SZVREG)
+	cfi_offset (d13, oV0 + 13 * SZVREG)
+	cfi_offset (d14, oV0 + 14 * SZVREG)
+	cfi_offset (d15, oV0 + 15 * SZVREG)
+	ldp	x18, x19, [x0, oX0 + 18 * SZREG]
+	ldp	x20, x21, [x0, oX0 + 20 * SZREG]
+	ldp	x22, x23, [x0, oX0 + 22 * SZREG]
+	ldp	x24, x25, [x0, oX0 + 24 * SZREG]
+	ldp	x26, x27, [x0, oX0 + 26 * SZREG]
+	ldp	x28, x29, [x0, oX0 + 28 * SZREG]
+	ldr     x30,      [x0, oX0 + 30 * SZREG]
+	ldr     x2, [x0, oSP]
+	mov	sp, x2
+
+	/* Check for FP SIMD context.  We don't support restoring
+	   contexts created by the kernel, so this context must have
+	   been created by getcontext.  Hence we can rely on the
+	   first extension block being the FP SIMD context.  */
+	add     x2, x0, #oEXTENSION
+
+	mov	w3, #(FPSIMD_MAGIC & 0xffff)
+	movk	w3, #(FPSIMD_MAGIC >> 16), lsl #16
+	ldr	w1, [x2, #oHEAD + oMAGIC]
+	cmp	w1, w3
+	b.ne	2f
+
+	/* Restore the FP SIMD context.  */
+	add	x3, x2, #oV0 + 8 * SZVREG
+	ldp	 d8,  d9, [x3], #2 * SZVREG
+	ldp	d10, d11, [x3], #2 * SZVREG
+	ldp	d12, d13, [x3], #2 * SZVREG
+	ldp	d14, d15, [x3], #2 * SZVREG
+
+	add	x3, x2, oFPSR
+
+	ldr	w4, [x3]
+	msr	fpsr, x4
+
+	ldr	w4, [x3, oFPCR - oFPSR]
+	msr	fpcr, x4
+
+2:
+	ldr     x16, [x0, oPC]
+	/* Restore arg registers.  */
+	ldp	x2, x3, [x0, oX0 + 2 * SZREG]
+	ldp	x4, x5, [x0, oX0 + 4 * SZREG]
+	ldp	x6, x7, [x0, oX0 + 6 * SZREG]
+	ldp	x0, x1, [x0, oX0 + 0 * SZREG]
+	/* Jump to the new pc value.  */
+	br	x16
 PSEUDO_END (__setcontext)
 weak_alias (__setcontext, setcontext)
 
-ENTRY(__startcontext)
+ENTRY (__startcontext)
 	mov	x0, x19
 	cbnz	x0, __setcontext
-1:	b       HIDDEN_JUMPTARGET(_exit)
-END(__startcontext)
+1:	b       HIDDEN_JUMPTARGET (_exit)
+END (__startcontext)
diff --git glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/ucontext_i.sym glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/ucontext_i.sym
index 1afff78..ab3930c 100644
--- glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/ucontext_i.sym
+++ glibc-2.17-c758a686/ports/sysdeps/unix/sysv/linux/aarch64/ucontext_i.sym
@@ -37,6 +37,7 @@ STACK_FLAGS			stack (ss_flags)
 oX0				mcontext (regs)
 oSP				mcontext (sp)
 oPC				mcontext (pc)
+oPSTATE				mcontext (pstate)
 oEXTENSION                      mcontext (__reserved)
 
 #define fpsimd_context(member)  offsetof (struct fpsimd_context, member)
