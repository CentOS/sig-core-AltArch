commit e7f07af50b231d3ade6b4d338a65d6b571f96116
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   Fri Feb 27 22:18:56 2015 -0300

    Avoid unsafe loc_name type casts with additional variable
    
    for  ChangeLog
    
    	[BZ #15969]
    	* locale/findlocale.c (_nl_find_locale): Introduce const
    	version of loc_name and drop unsafe type casts.

diff --git a/locale/findlocale.c b/locale/findlocale.c
index 5e2639b..9e7df12 100644
--- a/locale/findlocale.c
+++ b/locale/findlocale.c
@@ -105,7 +105,7 @@ _nl_find_locale (const char *locale_path, size_t locale_path_len,
 {
   int mask;
   /* Name of the locale for this category.  */
-  char *loc_name = (char *) *name;
+  const char *cloc_name = *name;
   const char *language;
   const char *modifier;
   const char *territory;
@@ -113,39 +113,39 @@ _nl_find_locale (const char *locale_path, size_t locale_path_len,
   const char *normalized_codeset;
   struct loaded_l10nfile *locale_file;
 
-  if (loc_name[0] == '\0')
+  if (cloc_name[0] == '\0')
     {
       /* The user decides which locale to use by setting environment
 	 variables.  */
-      loc_name = getenv ("LC_ALL");
-      if (!name_present (loc_name))
-	loc_name = getenv (_nl_category_names.str
-			+ _nl_category_name_idxs[category]);
-      if (!name_present (loc_name))
-	loc_name = getenv ("LANG");
-      if (!name_present (loc_name))
-	loc_name = (char *) _nl_C_name;
+      cloc_name = getenv ("LC_ALL");
+      if (!name_present (cloc_name))
+	cloc_name = getenv (_nl_category_names.str
+			    + _nl_category_name_idxs[category]);
+      if (!name_present (cloc_name))
+	cloc_name = getenv ("LANG");
+      if (!name_present (cloc_name))
+	cloc_name = _nl_C_name;
     }
 
   /* We used to fall back to the C locale if the name contains a slash
      character '/', but we now check for directory traversal in
      valid_locale_name, so this is no longer necessary.  */
 
-  if (__builtin_expect (strcmp (loc_name, _nl_C_name), 1) == 0
-      || __builtin_expect (strcmp (loc_name, _nl_POSIX_name), 1) == 0)
+  if (__builtin_expect (strcmp (cloc_name, _nl_C_name), 1) == 0
+      || __builtin_expect (strcmp (cloc_name, _nl_POSIX_name), 1) == 0)
     {
       /* We need not load anything.  The needed data is contained in
 	 the library itself.  */
-      *name = (char *) _nl_C_name;
+      *name = _nl_C_name;
       return _nl_C[category];
     }
-  else if (!valid_locale_name (loc_name))
+  else if (!valid_locale_name (cloc_name))
     {
       __set_errno (EINVAL);
       return NULL;
     }
 
-  *name = loc_name;
+  *name = cloc_name;
 
   /* We really have to load some data.  First we try the archive,
      but only if there was no LOCPATH environment variable specified.  */
@@ -158,11 +158,10 @@ _nl_find_locale (const char *locale_path, size_t locale_path_len,
 
       /* Nothing in the archive with the given name.  Expanding it as
 	 an alias and retry.  */
-      loc_name = (char *) _nl_expand_alias (*name);
-      if (loc_name != NULL)
+      cloc_name = _nl_expand_alias (*name);
+      if (cloc_name != NULL)
 	{
-	  data = _nl_load_locale_from_archive (category,
-					       (const char **) &loc_name);
+	  data = _nl_load_locale_from_archive (category, &cloc_name);
 	  if (__builtin_expect (data != NULL, 1))
 	    return data;
 	}
@@ -175,14 +174,14 @@ _nl_find_locale (const char *locale_path, size_t locale_path_len,
     /* We really have to load some data.  First see whether the name is
        an alias.  Please note that this makes it impossible to have "C"
        or "POSIX" as aliases.  */
-    loc_name = (char *) _nl_expand_alias (*name);
+    cloc_name = _nl_expand_alias (*name);
 
-  if (loc_name == NULL)
+  if (cloc_name == NULL)
     /* It is no alias.  */
-    loc_name = (char *) *name;
+    cloc_name = *name;
 
   /* Make a writable copy of the locale name.  */
-  loc_name = strdupa (loc_name);
+  char *loc_name = strdupa (cloc_name);
 
   /* LOCALE can consist of up to four recognized parts for the XPG syntax:
 
